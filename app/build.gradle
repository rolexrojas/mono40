apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'io.fabric'

def appName = 'tPago'

android {
  packagingOptions {
    exclude 'META-INF/rxjava.properties'
  }

  compileSdkVersion 25
  buildToolsVersion '26.0.2'

  defaultConfig {
    applicationId 'com.tpago.movil'

    def (major, minor, patch) = [2, 2, 45]
    versionName "${major}.${minor}.${patch}"
    versionCode ((major * 10_000_000) + (minor * 100_000) + (patch * 1_000))

    minSdkVersion 19
    targetSdkVersion 25

    multiDexEnabled true

    vectorDrawables.useSupportLibrary = true

    javaCompileOptions {
      annotationProcessorOptions {
        includeCompileClasspath false

        arguments = [
          'autovaluegson.defaultCollectionsToEmpty': 'true',
          'autovaluegson.mutableAdaptersWithDefaultSetters': 'true'
        ]
      }
    }
  }

  flavorDimensions 'deviceType', 'environment'

  productFlavors {
    virtual {
      dimension 'deviceType'
    }

    physical {
      dimension 'deviceType'
    }

    mock {
      dimension 'environment'

      def flavorName = 'mock'

      applicationIdSuffix ".${flavorName}"

      resValue 'string', 'app_name', "${appName}-${flavorName}"

      buildConfigField 'boolean', 'MODE_CRASH_REPORTING', 'true'
      buildConfigField 'String', 'API_URL', 'null'
    }

    devt {
      dimension 'environment'

      def flavorName = 'devt'

      applicationIdSuffix ".${flavorName}"

      resValue 'string', 'app_name', "${appName}-${flavorName}"

      buildConfigField 'boolean', 'MODE_CRASH_REPORTING', 'false'
      buildConfigField 'String', 'API_URL', '"http://tpagonet-dev.gcs-systems.com/api/neo/"'
    }

    stag {
      dimension 'environment'

      def flavorName = 'stag'

      applicationIdSuffix ".${flavorName}"

      resValue 'string', 'app_name', "${appName}-${flavorName}"

      buildConfigField 'boolean', 'MODE_CRASH_REPORTING', 'true'
      buildConfigField 'String', 'API_URL', '"https://tpagonet-dev.gcs-systems.com/api/neo/"'
    }

    prep {
      dimension 'environment'

      def flavorName = 'prep'

      applicationIdSuffix ".${flavorName}"

      resValue 'string', 'app_name', "${appName}-${flavorName}"

      buildConfigField 'boolean', 'MODE_CRASH_REPORTING', 'false'
      buildConfigField 'String', 'API_URL', '"http://tpagonet-dev.gcs-systems.com/api/neo/"'
    }

    prod {
      dimension 'environment'

      resValue 'string', 'app_name', appName

      buildConfigField 'boolean', 'MODE_CRASH_REPORTING', 'true'
      buildConfigField 'String', 'API_URL', '"https://tpagonet.gcs-systems.com/api/neo/"'
    }
  }

  sourceSets {
    [ devt, stag, prep, prod ].each {
      it.java.srcDir 'src/common/java'
    }

    [ testDevt, testStag, testPrep, testProd ].each {
      it.java.srcDir 'src/testCommon/java'
    }
  }

  signingConfigs {
    debug {
      storeFile rootProject.file('./keystores/debug.jks')
    }

    beta {
      def properties = new Properties()
      rootProject.file('./keystores/beta.properties')
        .withInputStream { stream -> properties.load(stream) }

      storeFile rootProject.file('./keystores/beta.jks')
      storePassword properties.storePassword
      keyAlias 'soluciones gbh'
      keyPassword properties.keyPassword
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }

    beta {
      signingConfig signingConfigs.beta
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      zipAlignEnabled true
    }

    store {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      zipAlignEnabled true
    }
  }

  dexOptions {
    javaMaxHeapSize '4g'
  }

  applicationVariants.all { variant ->
    variant.outputs.all {
      def name = "${appName}-v${variant.versionName}-${variant.baseName}"
      if (!variant.signingConfig) {
        name += '-unsigned'
      }
      name += '.apk'
      outputFileName = name
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

retrolambda {
  javaVersion JavaVersion.VERSION_1_7
}

repositories {
  // Local repositories
  flatDir {
    dirs 'libs'
  }

  // Remote repositories
  google()

  jcenter()

  maven {
    url 'https://maven.fabric.io/public'
  }
  maven {
    url 'https://jitpack.io'
  }
}

dependencies {
  def applyDependencies = { context ->
    context.each { method, deps ->
      deps.each { identifier, value ->
        "${method}"(value)
      }
    }
  }

  applyDependencies(rootProject.ext.dependencies)
  applyDependencies(rootProject.ext.dependenciesDeprecated)
}
